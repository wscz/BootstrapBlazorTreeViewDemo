@page "/"

<PageTitle>Index</PageTitle>

@using System.ComponentModel.DataAnnotations;

<h3>TreeView基础用法</h3>

<p>通过设置 <code>OnTreeItemClick</code> 属性监控树形控件节点被点击时的事件，点击树形控件节点时下面日志显示选中节点的数据</p>

<p>你选中的节点是：<code>@selectItem</code></p>

<Switch ValueChanged="@ToggleStateChanged" OnColor="Color.Secondary" OnText="全部收缩" OffText="全部展开"></Switch>

<div>
    <div class="row g-3 form-inline">
        <div class="col-12 col-sm-4">
            <Checkbox DisplayText="显示勾选" ShowLabel="true" @bind-Value="showcheckbox"></Checkbox>
        </div>
    </div>
    <div class="row g-3 form-inline">
        <div class="col-12 col-sm-4">
            <Checkbox DisplayText="全部勾选" ShowLabel="true" TValue="bool" OnStateChanged="@OnStateChanged"></Checkbox>
        </div>
    </div>
</div>



<TreeView TItem="TreeFoo" Items="@Items" ShowCheckbox="@showcheckbox" OnTreeItemClick="@OnTreeItemClick" />


@code {

    /// <summary>
    /// TreeView数据源
    /// </summary>
    private List<TreeViewItem<TreeFoo>> Items { get; set; } = TreeFoo.GetTreeItems();

    /// <summary>
    /// TreeView选中的文本
    /// </summary>
    private string selectItem = "";

    /// <summary>
    /// TreeView选中的项
    /// </summary>
    private TreeViewItem<TreeFoo> treeViewItem;

    /// <summary>
    /// 是否显示选择框
    /// </summary>
    private bool showcheckbox = false;

    /// <summary>
    /// TreeView节点选中回调事件
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    private async Task OnTreeItemClick(TreeViewItem<TreeFoo> item)
    {
        if (item is not null)
        {
            treeViewItem = item;
            selectItem = item.Text;
        }
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// TreeView全部勾选
    /// </summary>
    /// <param name="state"></param>
    /// <param name="s"></param>
    /// <returns></returns>
    private async Task OnStateChanged(CheckboxState state, bool s)
    {
        EachTreeItemCheck(Items, state);
        await InvokeAsync(StateHasChanged);

    }

    /// <summary>
    /// 递归全选TreeView
    /// </summary>
    /// <param name="items"></param>
    /// <param name="isexpand"></param>
    private void EachTreeItemCheck(List<TreeViewItem<TreeFoo>> items, CheckboxState check)
    {
        foreach (var item in items)
        {
            item.CheckedState = check;
            if (item.Items.Any())
            {
                EachTreeItemCheck(item.Items, check);
            }
        }
    }

    /// <summary>
    /// TreeView全部展开/收缩
    /// </summary>
    /// <param name="state"></param>
    /// <returns></returns>
    private Task ToggleStateChanged(bool state)
    {
        EachTreeItem(Items, state);
        return Task.FromResult(true);
    }

    /// <summary>
    /// 递归展开/收缩TreeView
    /// </summary>
    /// <param name="items"></param>
    /// <param name="isexpand"></param>
    private void EachTreeItem(List<TreeViewItem<TreeFoo>> items, bool isexpand)
    {
        foreach (var item in items)
        {
            item.IsExpand = isexpand;
            if (item.Items.Any())
            {
                EachTreeItem(item.Items, isexpand);
            }
        }
    }

    /// <summary>
    /// TreeView数据实体类
    /// </summary>
    class TreeFoo
    {
        [Key]
        public string? Id { get; set; }

        public string? ParentId { get; set; }

        [Required]
        public string? Text { get; set; }

        public string Icon { get; set; } = "fa-solid fa-font-awesome";

        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        public static List<TreeViewItem<TreeFoo>> GetTreeItems()
        {
            var items = new List<TreeFoo>
        {
            new TreeFoo() { Text = "navigation one", Id = "1010", Icon = "fa-solid fa-font-awesome" },
            new TreeFoo() { Text = "Navigation two", Id = "1020", Icon = "fa-solid fa-font-awesome" },
            new TreeFoo() { Text = "Navigation three", Id = "1030", Icon = "fa-solid fa-font-awesome" },

            new TreeFoo() { Text = "Sub menu 1", Id = "1040", ParentId = "1020", Icon = "fa-solid fa-font-awesome" },
            new TreeFoo() { Text = "Sub menu 2", Id = "1050", ParentId = "1020", Icon = "fa-solid fa-font-awesome" },
            new TreeFoo() { Text = "Sub menu 3", Id = "1060", ParentId = "1020", Icon = "fa-solid fa-font-awesome" },

            new TreeFoo() { Text = "Sub Menu One", Id = "1070", ParentId = "1050", Icon = "fa-solid fa-font-awesome" },
            new TreeFoo() { Text = "Sub Menu Two", Id = "1080", ParentId = "1050", Icon = "fa-solid fa-font-awesome" },
            new TreeFoo() { Text = "Sub Menu Three", Id = "1090", ParentId = "1050", Icon = "fa-solid fa-font-awesome" },

            new TreeFoo() { Text = "Sub Menu Two sub menu one", Id = "1100", ParentId = "1080", Icon = "fa-solid fa-font-awesome" },
            new TreeFoo() { Text = "Sub Menu Two sub menu two", Id = "1110", ParentId = "1080", Icon = "fa-solid fa-font-awesome" },
            new TreeFoo() { Text = "Sub Menu Two sub menu three", Id = "1120", ParentId = "1080", Icon = "fa-solid fa-font-awesome" },

            new TreeFoo() { Text = "Sub menu 1", Id = "1130", ParentId = "1100", Icon = "fa-solid fa-font-awesome" },
            new TreeFoo() { Text = "Sub menu 2", Id = "1140", ParentId = "1100", Icon = "fa-solid fa-font-awesome" },
            new TreeFoo() { Text = "Sub menu 3", Id = "1150", ParentId = "1100", Icon = "fa-solid fa-font-awesome" }
        };

            // 算法获取属性结构数据
            return CascadingTree(items).ToList();
        }

        /// <summary>
        /// 树状数据层次化方法
        /// </summary>
        /// <param name="items">数据集合</param>
        /// <param name="parent">父级节点</param>
        public static IEnumerable<TreeViewItem<TreeFoo>> CascadingTree(IEnumerable<TreeFoo> items, TreeViewItem<TreeFoo>? parent = null) => items.Where(i => i.ParentId == parent?.Value.Id).Select(i =>
        {
            var item = new TreeViewItem<TreeFoo>(i)
                {
                    Text = i.Text,
                    Icon = i.Icon
                };
            item.Items = CascadingTree(items, item).ToList();
            item.Parent = parent;
            return item;
        });
    }
}
